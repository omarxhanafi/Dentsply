/*----------------------------------------------------------------------------------------
Author:         Miguel Coimbra (Salesforce) 2022-08-08
Description:    Quote Line Item Trigger Helper Class
Test class      Test_QuoteLineItemTriggerHelper

History
30-Aug-2022     Houssam ADIB    Add checkAndUpdateQuoteLineItems method
----------------------------------------------------------------------------------------*/
public with sharing class QuoteLineItemTriggerHelper {

    public static final String PREVENT_DELETION_MESSAGE = 'Quote line items associated with product bundles cannot be deleted, You must delete the Quote Line Bundle first. ';

    public static void canBeDeleted(List<QuoteLineItem> oldQuoteLineItemList) {
        if (oldQuoteLineItemList.isEmpty()) return ;
        for (QuoteLineItem qli: oldQuoteLineItemList){
            if (qli.QuoteProductBundle__c <> null){
                if (!qli.canBeDeleted__c){
                    qli.addError(PREVENT_DELETION_MESSAGE);
                }
            }
        }
    }

    /*------------------------------------------------------------
    Description:    Root Method
                    Fix Quote Line items generated by the standard while creating a new quote by :
                    -Creating new quote line bundle records
                    -Updating the quote line items and links them to their correspondent product bundles
                    This targets only the opportunities that are in sync with a quote having product bundles linked.

    Inputs:         @param quoteLineItems     The new quote line items being inserted
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static void checkAndUpdateQuoteLineItems(List<QuoteLineItem> quoteLineItems)
    {
        List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper> quoteLineBundleWrappers = new List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper>();

        // 1-Group the quote line items being inserted by quote in a map
        Map<Id, List<QuoteLineItem>> quoteToNewLineItems = assortQuoteLineItemsByQuote(quoteLineItems);

        if(quoteToNewLineItems.size()>0)
        {
            // 2-Get the list of opportunities for the above quotes and group quotes by opportunity in a map (Query on Quote Object)
            Map<Id, List<Quote>> opportunityToQuotesHavingNewItems = assortQuotesByOpportunity(quoteToNewLineItems.keySet());

            // 3-The purpose of the below retrieval is to get the synced quote for each opportunity in sync (Query on Opportunity Object)
            Map<Id, Opportunity> opportunitiesSynced = getSyncedOpportunities(opportunityToQuotesHavingNewItems);

            if(opportunitiesSynced.size()>0)
            {
                // 4-Below retrieves the quote line items for each synced quote of the above opportunities (Query on Quote Object)
                Map<Id, Quote> syncedQuotesWithLineItems = getSyncedQuotesLineItems(opportunitiesSynced);

                // 5-Loop Through Opportunities to find which quote line items need to correct their QuoteProductBundle__c field
                quoteLineBundleWrappers.addAll(treatEachOpportunity(opportunityToQuotesHavingNewItems, opportunitiesSynced, syncedQuotesWithLineItems, quoteToNewLineItems));

                // 6-Insert the quote line bundle and correct the new quote line items just inserted without a link to quote line bundle
                insertQuoteLineBundlesAndCorrectNewLineItems(quoteLineBundleWrappers);
            }
        }
    }

    /*------------------------------------------------------------
    Description:    Loop on each synced opportunity to generate Quote line Bundle Wrappers for its newly inserted quote

    Inputs:         @param  opportunityToQuotesHavingNewItems   Maps each opportunity with its child quote line items
                    @param  opportunitiesSynced                 Contains only the synced opportunities, bringing its child synced quote
                    @param  syncedQuotesWithLineItems           Contains the synced quotes along with its synced child quote line items
                    @param  quoteToNewLineItems                 Contains the new inserted quote line items mapped with their parent quote

    Outputs:        List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper>     List of Quote line Bundle Wrappers
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper> treatEachOpportunity(
            Map<Id, List<Quote>> opportunityToQuotesHavingNewItems,
            Map<Id, Opportunity> opportunitiesSynced,
            Map<Id, Quote> syncedQuotesWithLineItems,
            Map<Id, List<QuoteLineItem>> quoteToNewLineItems)
    {
        List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper> quoteLineBundleWrappers = new List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper>();

        for (Id opportunityId : opportunityToQuotesHavingNewItems.keySet())
        {
            // The opportunity has one synced quote:
            Quote syncedQuote = opportunitiesSynced.get(opportunityId).Quotes.get(0);

            // Loop Through the Quotes being inserted to update their line items:
            for (Quote quoteHavingNewItems : opportunityToQuotesHavingNewItems.get(opportunityId))
            {
                // a-Get the actual synced Quote Line Items to the Opportunity:
                List<QuoteLineItem> syncedLineItems = syncedQuotesWithLineItems.get(syncedQuote.Id).QuoteLineItems;
                // b-Below the new Inserted Quote Line Items
                List<QuoteLineItem> newLineItems = quoteToNewLineItems.get(quoteHavingNewItems.Id);
                // c-Compare and correct the inserted Quote line Items product bundle field. We note the bundles we linked in quoteBundlesLinked
                quoteLineBundleWrappers.addAll(populateQuoteLineBundleWrappers(syncedQuote,newLineItems, syncedLineItems));
            }
        }
        return quoteLineBundleWrappers;
    }

    /*------------------------------------------------------------
    Description:    Generate a list of quote line bundle wrappers for each quote
                    The quote line bundle wrapper will contain all the information needed to :
                    -insert a new quote line bundle
                    -correct the associated quote line items in the new quote inserted

    Inputs:         @param syncedQuote      Synced quote of the opportunity
                    @param newLineItems     New quote line items that has been created
                    @param syncedLineItems  The quote line items of the synced quote of the parent opportunity

    Outputs:        List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper>     List of Quote line Bundle Wrappers
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper> populateQuoteLineBundleWrappers(Quote syncedQuote, List<QuoteLineItem> newLineItems, List<QuoteLineItem> syncedLineItems)
    {
        // Classify the synced quote line items by their quote line bundle
        Map<Id,List<QuoteLineItem>> quoteLineBundleToItsSyncedLineItems = classifyLineItemByQuoteLineBundle(syncedLineItems);

        List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper> quoteLineBundleWrappers = new List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper>();

        for(Id quoteBundle : quoteLineBundleToItsSyncedLineItems.keySet())
        {
            List<QuoteLineItem> bundleSyncedLineItems = quoteLineBundleToItsSyncedLineItems.get(quoteBundle);

            List<QuoteLineItem> bundleNewLineItems = new List<QuoteLineItem>();

            for(QuoteLineItem syncedLine : bundleSyncedLineItems)
            {
                bundleNewLineItems.add(findCorrespondentNewLineItem(syncedLine,newLineItems));
            }

            Id bundleId = bundleSyncedLineItems.get(0).QuoteProductBundle__r.ProductBundle__c;
            BundleLineItemsWrapper newQuoteBundle = new BundleLineItemsWrapper(syncedQuote, quoteBundle, bundleNewLineItems, bundleId);
            quoteLineBundleWrappers.add(newQuoteBundle);
        }

        return quoteLineBundleWrappers;
    }

    /*------------------------------------------------------------
    Description:    Assort Quote line items in map grouped by their parent quote line bundle

    Inputs:         @param syncedLineItems          The quote line items of the synced quote of the parent opportunity

    Output:         Map<Id,List<QuoteLineItem>>     Map of Quote Line bundles with corresponding child quote line items
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static Map<Id,List<QuoteLineItem>>  classifyLineItemByQuoteLineBundle(List<QuoteLineItem> syncedLineItems)
    {
        Map<Id,List<QuoteLineItem>> quoteLineBundleToItsSyncedLineItems = new Map<Id, List<QuoteLineItem>>();
        for (QuoteLineItem syncedItem : syncedLineItems)
        {
            if(syncedItem.QuoteProductBundle__c != null)
            {
                if (quoteLineBundleToItsSyncedLineItems.containsKey(syncedItem.QuoteProductBundle__c))
                {
                    quoteLineBundleToItsSyncedLineItems.get(syncedItem.QuoteProductBundle__c).add(syncedItem);
                } else {
                    quoteLineBundleToItsSyncedLineItems.put(syncedItem.QuoteProductBundle__c, new List<QuoteLineItem>{
                            syncedItem
                    });
                }
            }
        }
        return quoteLineBundleToItsSyncedLineItems;
    }

    /*------------------------------------------------------------
    Description:    Search for correspondent new line item generated by the standard for the synced line item 'syncedLineItem'

    Inputs:         @param syncedLineItems      The quote line items of the synced quote of the parent opportunity
                    @param newQuoteLineItems    New quote line items that has been created for a single quote

    Outputs:        QuoteLineItem               The line item generated by the standard for syncedLineItems record
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static QuoteLineItem findCorrespondentNewLineItem(QuoteLineItem syncedLineItem, List<QuoteLineItem> newQuoteLineItems)
    {
        QuoteLineItem newItem;
        Boolean sameQuote;
        for (Integer i = 0; i < newQuoteLineItems.size(); i++)
        {
            newItem = newQuoteLineItems.get(i);
            sameQuote = ( newItem.QuoteId == syncedLineItem.QuoteId );

            if(     !sameQuote
                    && syncedLineItem.UnitPrice == newItem.UnitPrice
                    && syncedLineItem.Product2Id == newItem.Product2Id
                    && syncedLineItem.Description == newItem.Description
                    && syncedLineItem.Discount == newItem.Discount)
            {
                newQuoteLineItems.remove(i);
                break;
            }
        }
        return newItem;
    }

    /*------------------------------------------------------------
    Description:    Inserts the quote line bundle and then in another step, correct the linked quote line bundle of the new quote line items

    Inputs:         @param quoteLineBundleWrappers      List of quote line bundle line wrappers
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static void insertQuoteLineBundlesAndCorrectNewLineItems(List<QuoteLineItemTriggerHelper.BundleLineItemsWrapper> quoteLineBundleWrappers)
    {
        List<QuoteProductBundle__c> allQuoteLineBundles = new List<QuoteProductBundle__c>();

        for (BundleLineItemsWrapper quoteBundleWrapper : quoteLineBundleWrappers)
        {
            allQuoteLineBundles.add(quoteBundleWrapper.quoteLineBundle);
        }

        if (allQuoteLineBundles.size() > 0)
        {
            insertQuoteProductBundles(allQuoteLineBundles);

            for (BundleLineItemsWrapper quoteBundleWrapper : quoteLineBundleWrappers) {
                quoteBundleWrapper.updateNewlyInsertedQuoteLineItems();
            }
        }
    }

    /*------------------------------------------------------------
    Description:    Inserts the quote line bundles without triggering the insertion of the quote line items in QuoteProductBundleTriggerHandler
                    As we will manually set their quote line items within the newly inserted quote line items in this trigger

    Inputs:         @param  quoteProductBundlesToInsertSet  a Set of quote line bundles to insert
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static void insertQuoteProductBundles(List<QuoteProductBundle__c> quoteProductBundlesToInsertSet)
    {
        TriggerHandler.bypass('QuoteProductBundleTriggerHandler');
        try {
            insert quoteProductBundlesToInsertSet;
        } catch (Exception e) {
            DebugLog.addException(e, 'QuoteLineItemTriggerHelper.insertQuoteProductBundles');
        }
        TriggerHandler.clearBypass('QuoteProductBundleTriggerHandler');
    }

    /*------------------------------------------------------------
    Description:    Classify quote line items records in a map grouped by their quote Id

    Inputs:         @param  quoteLineItems  List of quote line items

    Outputs:        Map<Id, List<QuoteLineItem>>
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static Map<Id, List<QuoteLineItem>> assortQuoteLineItemsByQuote(List<QuoteLineItem> quoteLineItems)
    {
        Map<Id, List<QuoteLineItem>> quoteToLineItems = new Map<Id, List<QuoteLineItem>>();

        // a-Assorting items by quote
        for (QuoteLineItem item : quoteLineItems)
        {
            // Note : We are only taking the line items coming in from the parent opportunity
            if(item.OpportunityLineItemId != null)
            {
                if (quoteToLineItems.containsKey(item.QuoteId)) {
                    quoteToLineItems.get(item.QuoteId).add(item);
                } else {
                    quoteToLineItems.put(item.QuoteId, new List<QuoteLineItem>{item});
                }
            }
        }

        // b-Filtering quotes that have at least one item linked to a quote bundle
        for(Id quoteId : quoteToLineItems.keySet())
        {
            List<QuoteLineItem> quoteInsertedLineItems = quoteToLineItems.get(quoteId);
            if(oneLineItemHasAQuoteBundle(quoteInsertedLineItems))
            {
                quoteToLineItems.remove(quoteId);
            }
        }

        return quoteToLineItems;
    }

    /*------------------------------------------------------------
    Description:    Tells whether a single quote line item - among the inserted items - has a linked quote product line

    Inputs:         @param  quoteLineItems  A list of quote line items of a single quote record

    Outputs:        Boolean If the list of quote line items has one item linked to a quote line bundle
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static Boolean oneLineItemHasAQuoteBundle(List<QuoteLineItem> quoteLineItems)
    {
        Boolean oneLineItemHasAQuoteBundle = false;
        for (QuoteLineItem item : quoteLineItems)
        {
            if (item.QuoteProductBundle__c != null)
            {
                return true;
            }
        }
        return oneLineItemHasAQuoteBundle;
    }

    /*------------------------------------------------------------
    Description:    Classify quotes in a map grouped by their opportunity Id

    Inputs:         @param  quotesIds   Quote Ids used to retrieve the quotes records

    Outputs:        Map<Id, List<Quote>>    Map of quotes grouped by their parent opportunity
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static Map<Id, List<Quote>> assortQuotesByOpportunity(Set<Id> quotesIds)
    {
        List<Quote> quotes = [SELECT Id, Name, OpportunityId, CurrencyIsoCode FROM Quote WHERE Id IN :quotesIds];

        Map<Id, List<Quote>> opportunityToQuotes = new Map<Id, List<Quote>>();

        for (Quote quote : quotes)
        {
            if (opportunityToQuotes.containsKey(quote.OpportunityId))
            {
                opportunityToQuotes.get(quote.OpportunityId).add(quote);
            }
            else
            {
                opportunityToQuotes.put(quote.OpportunityId, new List<Quote>{quote});
            }
        }

        return opportunityToQuotes;
    }

    /*------------------------------------------------------------
    Description:    Retrieves the synced opportunities along with their child quote records

    Inputs:         @param  opportunityToQuotesHavingNewItems   Opportunity Ids mapped to their new quote line items being inserted

    Outputs:        Map<Id, Opportunity>        Synced opportunities with their child synced quote
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static Map<Id, Opportunity> getSyncedOpportunities(Map<Id, List<Quote>> opportunityToQuotesHavingNewItems)
    {
        Map<Id, Opportunity> opportunitiesSynced = new Map<Id, Opportunity>([
                SELECT Id, Name, SyncedQuoteId, (SELECT Id, Name, CurrencyIsoCode FROM Quotes WHERE IsSyncing = true)
                FROM Opportunity
                WHERE Id IN :opportunityToQuotesHavingNewItems.keySet()
                AND opportunity.SyncedQuoteId != null
        ]);

        return opportunitiesSynced;
    }

    /*------------------------------------------------------------
    Description:    Retrieve the synced quote records along with its child quote line items

    Inputs:         @param  opportunitiesSynced     The opportunities that are in sync

    Outputs:        Map<Id, Quote>  Synced quote records
    History:
    24-Sep-2022     Houssam     New Method
    ------------------------------------------------------------*/
    public static Map<Id, Quote> getSyncedQuotesLineItems(Map<Id, Opportunity> opportunitiesSynced)
    {
        Set<Id> syncedQuotesIds = new Set<Id>();
        for (Opportunity opportunity : opportunitiesSynced.values()) {
            syncedQuotesIds.add(opportunity.Quotes.get(0).Id);
        }

        Map<Id, Quote> syncedQuotes = new Map<Id, Quote>([
                SELECT Id, Name, OpportunityId, CurrencyIsoCode,
                    (SELECT Id, Product2Id, CurrencyIsoCode, QuoteId, UnitPrice, Description,
                            QuoteProductBundle__c, QuoteProductBundle__r.ProductBundle__c, Discount FROM QuoteLineItems)
                FROM Quote
                WHERE Id IN :syncedQuotesIds
        ]);
        return syncedQuotes;
    }

    /*------------------------------------------------------------
    Description:    Inner Wrapper Class that groups :
                    -The new quote line bundles to be inserted
                    -The new quote line items to be corrected as the standard doesn't set the Quote Product bundle field
    History:
    24-Sep-2022     Houssam     New Inner Class
    ------------------------------------------------------------*/
    public class BundleLineItemsWrapper {

        // New
        public Id newQuoteId;
        public List<QuoteLineItem> newQuoteLineItems;
        public QuoteProductBundle__c quoteLineBundle;

        // Synced
        public Quote syncedQuote;
        public Id quoteLineBundleId;

        /*------------------------------------------------------------
        Description:    Wrapper Construct

        Inputs:         @param  syncedQuote             The Synced Quote record
                        @param  quoteLineBundleId       The Synced Quote Line Bundle Id
                        @param  newQuoteLineItems       The newly inserted Quote Line items
                        @param  bundleId                The bundle Id to be linked for the new quote line items
        History:
        24-Sep-2022     Houssam     New Method
        ------------------------------------------------------------*/
        public BundleLineItemsWrapper(Quote syncedQuote, Id quoteLineBundleId, List<QuoteLineItem> newQuoteLineItems, Id bundleId)
        {

            this.newQuoteLineItems = newQuoteLineItems;
            this.syncedQuote = syncedQuote;
            this.quoteLineBundleId = quoteLineBundleId;
            this.newQuoteId = newQuoteLineItems.get(0).quoteId;

            this.generateQuoteLineBundle(bundleId);
        }

        /*------------------------------------------------------------
        Description:    Generate the quote line bundle record for this wrapper

        Inputs:         @param  bundleId  The Product Bundle Id to link with the quote
        History:
        24-Sep-2022     Houssam     New Method
        ------------------------------------------------------------*/
        public void generateQuoteLineBundle(Id bundleId)
        {
            if(this.syncedQuote.Id != newQuoteId)
            {
                this.quoteLineBundle = new QuoteProductBundle__c( Quote__c = this.newQuoteId, ProductBundle__c = bundleId,
                        CurrencyIsoCode = syncedQuote.CurrencyIsoCode);
            }
        }

        /*------------------------------------------------------------
        Description:    After Having the Quote line bundle Id, we set the QuoteProductBundle__c field on the quote line items
        History:
        24-Sep-2022     Houssam     New Method
        ------------------------------------------------------------*/
        public void updateNewlyInsertedQuoteLineItems()
        {
            for(QuoteLineItem newItem : this.newQuoteLineItems)
            {
                newItem.QuoteProductBundle__c = this.quoteLineBundle?.Id;
            }
        }
    }
}